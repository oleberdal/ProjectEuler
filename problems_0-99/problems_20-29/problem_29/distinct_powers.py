"""
Author: Berdal, Ole
Created: 18.03.2019
Version: Python 3.6.7

https://projecteuler.net/problem=29:
Consider all integer combinations of aᵇ for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2²=4, 2³=8, 2⁴=16, 2⁵=32
3²=9, 3³=27, 3⁴=81, 3⁵=243
4²=16, 4³=64, 4⁴=256, 4⁵=1024
5²=25, 5³=125, 5⁴=625, 5⁵=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by aᵇ for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
"""
import time
start_time = time.time()


def distinct_terms_of_exponential_sequence_between(lower, upper):
    primes = list_of_primes(until=upper)

    terms = []
    for base in range(lower, upper + 1):
        base_primes, index = {}, 0

        while base != 1:
            prime = primes[index]
            while not base % prime:
                base //= prime
                base_primes[prime] = base_primes.get(prime, 0) + 1
            index += 1

        for exponent in range(lower, upper + 1):
            exponential_primes = base_primes.copy()
            for prime in exponential_primes.keys():
                exponential_primes[prime] *= exponent
            if exponential_primes not in terms:
                terms.append(exponential_primes)

    return len(terms)


def list_of_primes(until):
    primes = [2]
    sieve = [True] * ((until - 1) // 2)

    for i in range(len(sieve)):
        if sieve[i]:
            prime = 2 * (i + 1) + 1
            primes.append(prime)
            for r in range((prime**2 - 3) // 2, len(sieve), prime):
                sieve[r] = False

    return primes


def main():
    solution = distinct_terms_of_exponential_sequence_between(lower=2, upper=100)

    print('Solution: %s.\nExecution time: %s seconds.' % (solution, time.time() - start_time))


if __name__ == '__main__':
    main()
